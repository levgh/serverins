#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
DOMAIN="domenforserver123"
TOKEN="7c4ac80c-d14f-4ca6-ae8c-df2b04a939ae"
CURRENT_USER=$(whoami)
SERVER_IP=$(hostname -I | awk '{print $1}')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
set -eEuo pipefail
trap 'rollback' ERR
trap 'cleanup' EXIT

# –í –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
if [ "$CURRENT_USER" = "root" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å sudo –ø—Ä–∞–≤–∞–º–∏."
    echo "   –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: adduser –≤–∞—à_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å && usermod -aG sudo –≤–∞—à_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –ø—Ä–∞–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ sudo)
if ! sudo -n true 2>/dev/null; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $CURRENT_USER –Ω–µ—Ç sudo –ø—Ä–∞–≤!"
    echo "   –î–æ–±–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø—É sudo: sudo usermod -aG sudo $CURRENT_USER"
    exit 1
fi

echo "=========================================="
echo "üöÄ –£–°–¢–ê–ù–û–í–ö–ê –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–û –í–°–ï–ú–ò –°–ï–†–í–ò–°–ê–ú–ò"
echo "=========================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%H:%M:%S')] $1" | tee -a "/home/$CURRENT_USER/install.log"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
get_interface() {
    local interface
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    interface=$(ip route | awk '/default/ {print $5}' | head -1)
    
    if [ -z "$interface" ]; then
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        interface=$(ip link show | awk -F: '/state UP/ && !/lo:/ {print $2}' | tr -d ' ' | head -1)
    fi
    
    if [ -z "$interface" ]; then
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫—Ä–æ–º–µ loopback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º glob
        for iface in /sys/class/net/*; do
            iface_name=$(basename "$iface")
            if [ "$iface_name" != "lo" ]; then
                interface="$iface_name"
                break
            fi
        done
    fi
    
    echo "$interface"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
execute_command() {
    local cmd="$1"
    local description="$2"
    
    log "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $description"
    log "–ö–æ–º–∞–Ω–¥–∞: $cmd"
    
    if eval "$cmd" 2>&1 | tee -a "/home/$CURRENT_USER/install.log"; then
        log "‚úÖ –£—Å–ø–µ—à–Ω–æ: $description"
        return 0
    else
        log "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: $description"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
check_disk_space() {
    local required_gb=20
    local available_kb available_gb
    
    available_kb=$(df / | awk 'NR==2 {print $4}')
    available_gb=$(echo "$available_kb / 1024 / 1024" | bc -l 2>/dev/null || echo "$available_kb" | awk '{printf "%.1f", $1/1024/1024}')
    
    if (( $(echo "$available_gb < $required_gb" | bc -l 2>/dev/null || echo "1") )); then
        log "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${available_gb}GB, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${required_gb}GB"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤)
check_ports() {
    local ports=(80 8096 11435 5000 7860 8080 3001 51820 5001)
    local conflict_found=0
    local port process_info
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    for port in "${ports[@]}"; do
        if ss -tulpn | grep ":$port " > /dev/null; then
            process_info=$(ss -tulpn | grep ":$port " | awk '{print $6}' | head -1)
            log "‚ùå –ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º: $process_info"
            conflict_found=1
        fi
    done
    
    if [ $conflict_found -eq 1 ]; then
        log "‚ö†Ô∏è  –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
check_required_commands() {
    local required_cmds=("curl" "wget" "git" "docker" "nginx" "mysql" "python3" "pip3")
    local missing_cmds=()
    
    for cmd in "${required_cmds[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_cmds+=("$cmd")
            log "‚ö†Ô∏è $cmd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else
            log "‚úÖ $cmd –Ω–∞–π–¥–µ–Ω–∞"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç–∫–∞—Ç–∞)
rollback() {
    local exit_code=$?
    log "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–æ–¥ –æ—à–∏–±–∫–∏: $exit_code)..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
    cd "/home/$CURRENT_USER/docker" 2>/dev/null && docker-compose down 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    sudo systemctl stop wg-quick@wg0 2>/dev/null || true
    sudo systemctl disable wg-quick@wg0 2>/dev/null || true
    sudo systemctl stop ollama 2>/dev/null || true
    sudo systemctl disable ollama 2>/dev/null || true
    
    log "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ß–∞—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
    exit $exit_code
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup() {
    log "üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞..."
    # –°–Ω–∏–º–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    trap - ERR EXIT
}

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
mkdir -p "/home/$CURRENT_USER"
touch "/home/$CURRENT_USER/install.log"
chmod 600 "/home/$CURRENT_USER/install.log"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ –∏ –ø–∞–º—è—Ç–∏)
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ (–º–∏–Ω–∏–º—É–º 2GB)
TOTAL_MEM=$(free -g | grep Mem: | awk '{print $2}')
if [ "$TOTAL_MEM" -lt 2 ]; then
    log "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (${TOTAL_MEM}GB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2GB"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ARM)
ARCH=$(uname -m)
case "$ARCH" in
    "x86_64")    log "‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: x86_64" ;;
    "aarch64")   log "‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ARM64 (Raspberry Pi)" ;;
    "armv7l")    log "‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ARMv7" ;;
    *)           log "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ $ARCH –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É" ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤)
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
check_required_commands

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞: $DOMAIN"
log "–¢–æ–∫–µ–Ω DuckDNS: ${TOKEN:0:8}****"
log "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $CURRENT_USER"
log "IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# 1. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
log "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
execute_command "sudo apt update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
execute_command "sudo apt upgrade -y" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"

# 2. –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã)
log "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
execute_command "sudo apt install -y curl wget git docker.io nginx mysql-server python3 python3-pip cron nano htop tree unzip net-tools wireguard resolvconf qrencode fail2ban software-properties-common apt-transport-https ca-certificates gnupg bc jq" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
install_docker_compose() {
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        log "‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    log "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º jq –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! command -v jq &> /dev/null; then
        execute_command "sudo apt install -y jq" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq"
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
    local compose_version
    compose_version=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.tag_name')
    
    if [ -z "$compose_version" ]; then
        log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é Docker Compose, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback"
        compose_version="v2.24.0"
    fi
    
    execute_command "sudo curl -L 'https://github.com/docker/compose/releases/download/${compose_version}/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose" "–ó–∞–≥—Ä—É–∑–∫–∞ Docker Compose"
    execute_command "sudo chmod +x /usr/local/bin/docker-compose" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ Docker Compose"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if docker-compose version &> /dev/null; then
        log "‚úÖ Docker Compose —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose"
        return 1
    fi
}

install_docker_compose

# 3. –ù–ê–°–¢–†–û–ô–ö–ê DOCKER (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞)
log "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker..."
execute_command "sudo systemctl enable docker" "–í–∫–ª—é—á–µ–Ω–∏–µ Docker"
execute_command "sudo systemctl start docker" "–ó–∞–ø—É—Å–∫ Docker"
execute_command "sudo usermod -aG docker $CURRENT_USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker"

# 4. –ù–ê–°–¢–†–û–ô–ö–ê DUCKDNS (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏)
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDNS..."

# –°–û–ó–î–ê–ï–ú –ü–ê–ü–ö–£ –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –°–ö–†–ò–ü–¢–ê
mkdir -p "/home/$CURRENT_USER/scripts"

cat > "/home/$CURRENT_USER/scripts/duckdns-update.sh" << 'DUCKDNS_EOF'
#!/bin/bash
DOMAIN="domenforserver123"
TOKEN="7c4ac80c-d14f-4ca6-ae8c-df2b04a939ae"
URL="https://www.duckdns.org/update?domains=${DOMAIN}&token=${TOKEN}&ip="
response=$(curl -s -w "\n%{http_code}" "$URL")
http_code=$(echo "$response" | tail -n1)
content=$(echo "$response" | head -n1)
echo "$(date): HTTP $http_code - $content" >> "/home/$(whoami)/scripts/duckdns.log"
DUCKDNS_EOF

chmod +x "/home/$CURRENT_USER/scripts/duckdns-update.sh"
# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
touch "/home/$CURRENT_USER/scripts/duckdns.log"
chmod 600 "/home/$CURRENT_USER/scripts/duckdns.log"

# –î–æ–±–∞–≤–ª—è–µ–º –≤ cron (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ cron)
(crontab -l 2>/dev/null | grep -v "duckdns-update.sh"; echo "*/5 * * * * /home/$CURRENT_USER/scripts/duckdns-update.sh") | crontab -
execute_command "/home/$CURRENT_USER/scripts/duckdns-update.sh" "–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ DuckDNS"

# 5. –ù–ê–°–¢–†–û–ô–ö–ê VPN (WIREGUARD) (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π)
log "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN WireGuard..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WireGuard (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)
if ! sudo modprobe wireguard 2>/dev/null; then
    log "‚ö†Ô∏è  WireGuard –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —è–¥—Ä–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º wireguard-dkms..."
    execute_command "sudo apt install -y wireguard-dkms" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard DKMS"
fi

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è VPN
mkdir -p "/home/$CURRENT_USER/vpn"
mkdir -p "/home/$CURRENT_USER/.wireguard"
cd "/home/$CURRENT_USER/vpn" || exit

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ WireGuard —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
sudo mkdir -p /etc/wireguard
sudo chmod 700 /etc/wireguard

# –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ resolvconf
sudo systemctl enable resolvconf
sudo systemctl start resolvconf

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
log "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π WireGuard..."
PRIVATE_KEY=$(wg genkey)
PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)

echo "$PRIVATE_KEY" | sudo tee "/etc/wireguard/private.key" > /dev/null
echo "$PUBLIC_KEY" | sudo tee "/etc/wireguard/public.key" > /dev/null

sudo chmod 600 /etc/wireguard/private.key
sudo chmod 600 /etc/wireguard/public.key

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ª—É—á—à–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
INTERFACE_NAME=$(get_interface)
if [ -z "$INTERFACE_NAME" ]; then
    log "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    exit 1
fi

log "üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $INTERFACE_NAME"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ä—Ç)
VPN_PORT=51820  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç WireGuard

log "üåê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard (–ø–æ—Ä—Ç: $VPN_PORT, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $INTERFACE_NAME)..."

sudo tee /etc/wireguard/wg0.conf > /dev/null << EOF
[Interface]
PrivateKey = $PRIVATE_KEY
Address = 10.0.0.1/24
ListenPort = $VPN_PORT
SaveConfig = true
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $INTERFACE_NAME -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $INTERFACE_NAME -j MASQUERADE
EOF

# –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)
log "üîß –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding..."
if ! grep -q "net.ipv4.ip_forward=1" /etc/sysctl.conf; then
    echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf
fi
sudo sysctl -p

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞)
log "üì± –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞..."
CLIENT_PRIVATE_KEY=$(wg genkey)
CLIENT_PUBLIC_KEY=$(echo "$CLIENT_PRIVATE_KEY" | wg pubkey)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
sudo tee -a /etc/wireguard/wg0.conf > /dev/null << EOF

[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = 10.0.0.2/32
EOF

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
tee "/home/$CURRENT_USER/vpn/client.conf" > /dev/null << EOF
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = 10.0.0.2/32
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = $PUBLIC_KEY
Endpoint = $SERVER_IP:$VPN_PORT
AllowedIPs = 0.0.0.0/0
EOF

chmod 600 "/home/$CURRENT_USER/vpn/client.conf"

# –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
log "üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞..."
if command -v qrencode &> /dev/null; then
    qrencode -t ansiutf8 < "/home/$CURRENT_USER/vpn/client.conf"
else
    log "‚ö†Ô∏è qrencode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ ufw)
if command -v ufw >/dev/null 2>&1; then
    log "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
    sudo ufw allow $VPN_PORT/udp
    sudo ufw allow ssh
    echo "y" | sudo ufw enable
fi

# –ó–∞–ø—É—Å–∫ WireGuard (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞)
log "üöÄ –ó–∞–ø—É—Å–∫ WireGuard..."
sudo systemctl enable wg-quick@wg0
sudo systemctl start wg-quick@wg0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
sleep 3
if sudo systemctl is-active --quiet wg-quick@wg0; then
    log "‚úÖ WireGuard —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    log "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN:"
    log "   –ü–æ—Ä—Ç: $VPN_PORT"
    log "   –°–µ—Ä–≤–µ—Ä–Ω—ã–π IP: $SERVER_IP"
    log "   –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π IP: 10.0.0.2"
    log "   –ö–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞: /home/$CURRENT_USER/vpn/client.conf"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    sudo wg show
    
else
    log "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WireGuard"
    sudo systemctl status wg-quick@wg0
    log "‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫..."
    sudo wg-quick up wg0
    sleep 2
    if sudo wg show wg0 >/dev/null 2>&1; then
        log "‚úÖ WireGuard –∑–∞–ø—É—â–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º"
    else
        log "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å WireGuard"
        log "‚ÑπÔ∏è  VPN –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
    fi
fi

# 6. –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞)
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
sudo mkdir -p "/home/$CURRENT_USER/docker/heimdall"
sudo mkdir -p "/home/$CURRENT_USER/docker/admin-panel"
sudo mkdir -p "/home/$CURRENT_USER/docker/auth-server"
sudo mkdir -p "/home/$CURRENT_USER/docker/jellyfin"
sudo mkdir -p "/home/$CURRENT_USER/docker/nextcloud"
sudo mkdir -p "/home/$CURRENT_USER/docker/ollama-webui"
sudo mkdir -p "/home/$CURRENT_USER/docker/stable-diffusion"
sudo mkdir -p "/home/$CURRENT_USER/docker/ai-campus"
sudo mkdir -p "/home/$CURRENT_USER/docker/uptime-kuma"
sudo mkdir -p "/home/$CURRENT_USER/scripts"
sudo mkdir -p "/home/$CURRENT_USER/data/users"
sudo mkdir -p "/home/$CURRENT_USER/data/logs"
sudo mkdir -p "/home/$CURRENT_USER/data/backups"
sudo mkdir -p "/home/$CURRENT_USER/media/movies"
sudo mkdir -p "/home/$CURRENT_USER/media/tv"
sudo mkdir -p "/home/$CURRENT_USER/media/music"
sudo mkdir -p "/home/$CURRENT_USER/media/streaming"
sudo mkdir -p "/home/$CURRENT_USER/media/temp"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è Docker —Å–µ—Ä–≤–∏—Å–æ–≤
sudo mkdir -p "/home/$CURRENT_USER/docker/jellyfin/config"
sudo mkdir -p "/home/$CURRENT_USER/docker/nextcloud/data"
sudo mkdir -p "/home/$CURRENT_USER/docker/stable-diffusion/config"
sudo mkdir -p "/home/$CURRENT_USER/docker/uptime-kuma/data"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
sudo chown -R "$CURRENT_USER:$CURRENT_USER" "/home/$CURRENT_USER/docker"
sudo chown -R "$CURRENT_USER:$CURRENT_USER" "/home/$CURRENT_USER/data"
sudo chown -R "$CURRENT_USER:$CURRENT_USER" "/home/$CURRENT_USER/media"
sudo chmod 755 "/home/$CURRENT_USER/docker"
sudo chmod 755 "/home/$CURRENT_USER/data"
sudo chmod 755 "/home/$CURRENT_USER/media"

# 7. –°–ò–°–¢–ï–ú–ê –ï–î–ò–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)
log "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–µ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
cat > "/home/$CURRENT_USER/data/users/users.json" << 'USERS_EOF'
{
  "users": [
    {
      "username": "admin",
      "password": "LevAdmin",
      "prefix": "Administrator",
      "permissions": ["all"],
      "created_at": "2024-01-01T00:00:00",
      "is_active": true
    },
    {
      "username": "user1", 
      "password": "user123",
      "prefix": "User",
      "permissions": ["basic_access"],
      "created_at": "2024-01-01T00:00:00",
      "is_active": true
    },
    {
      "username": "test",
      "password": "test123",
      "prefix": "User",
      "permissions": ["basic_access"],
      "created_at": "2024-01-01T00:00:00",
      "is_active": true
    }
  ],
  "sessions": {},
  "login_attempts": {},
  "blocked_ips": []
}
USERS_EOF

# –õ–æ–≥–∏
cat > "/home/$CURRENT_USER/data/logs/audit.log" << 'AUDIT_EOF'
[
  {
    "timestamp": "2024-01-01T00:00:00",
    "username": "system",
    "action": "system_start",
    "details": "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
    "ip": "127.0.0.1"
  }
]
AUDIT_EOF

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
chmod 600 "/home/$CURRENT_USER/data/users/users.json"
chmod 644 "/home/$CURRENT_USER/data/logs/audit.log"

# 8. –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –° –Ø–ù–î–ï–ö–° –ü–û–ò–°–ö–û–ú (–ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å JavaScript)
log "üåê –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."

cat > "/home/$CURRENT_USER/docker/heimdall/index.html" << 'MAIN_HTML'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–æ–º–∞—à–Ω–∏–π –°–µ—Ä–≤–µ—Ä - –£–º–Ω—ã–π —Ö–∞–±</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
        .card {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        }
        .login-card h2, .search-card h2 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: bold;
        }
        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }
        .login-btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            margin-bottom: 15px;
        }
        .error-message {
            color: #e74c3c;
            text-align: center;
            margin-top: 15px;
            display: none;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ */
        .yandex-search-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .yandex-search-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #ffdb4d;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }
        .yandex-search-input:focus {
            border-color: #fcc521;
            box-shadow: 0 0 0 3px rgba(255, 219, 77, 0.3);
        }
        .yandex-search-btn {
            padding: 15px 25px;
            background: #ffdb4d;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            color: #333;
            transition: background 0.3s;
            white-space: nowrap;
        }
        .yandex-search-btn:hover {
            background: #fcc521;
        }
        .search-quick-links {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }
        .quick-link {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
            border: 1px solid #e9ecef;
        }
        .quick-link:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
        }
        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .service-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: transform 0.3s;
        }
        .service-card:hover {
            transform: translateY(-5px);
        }
        .service-icon {
            font-size: 2em;
            margin-bottom: 10px;
        }
        .version-info {
            text-align: center;
            margin-top: 30px;
            color: white;
            font-size: 14px;
        }
        .version-link {
            color: #ffdb4d;
            cursor: pointer;
            text-decoration: underline;
        }
        .service-description {
            font-size: 12px;
            opacity: 0.9;
            margin-top: 5px;
        }
        .secret-info {
            text-align: center;
            margin-top: 10px;
            font-size: 12px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè† –£–º–Ω—ã–π –î–æ–º–∞—à–Ω–∏–π –°–µ—Ä–≤–µ—Ä</h1>
            <p>–í—Å–µ –≤–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</p>
        </div>
        
        <div class="main-content">
            <!-- –ë–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
            <div class="card login-card">
                <h2>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
                <form id="loginForm">
                    <div class="form-group">
                        <label>–õ–æ–≥–∏–Ω:</label>
                        <input type="text" id="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω" required>
                    </div>
                    
                    <div class="form-group">
                        <label>–ü–∞—Ä–æ–ª—å:</label>
                        <input type="password" id="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å" required>
                    </div>
                    
                    <button type="submit" class="login-btn">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</button>
                    
                    <div class="error-message" id="errorMessage">
                        –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å
                    </div>
                </form>

                <div class="secret-info">
                    üí° –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã
                </div>
            </div>

            <!-- –ë–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ -->
            <div class="card search-card">
                <h2>üîç –Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫</h2>
                <form class="yandex-search-form" id="yandexSearchForm" target="_blank" action="https://yandex.ru/search/" method="get">
                    <input type="text" name="text" class="yandex-search-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å..." required>
                    <button type="submit" class="yandex-search-btn">–ù–∞–π—Ç–∏</button>
                </form>

                <div class="search-quick-links">
                    <div class="quick-link" onclick="quickSearch('–ø–æ–≥–æ–¥–∞')">üå§Ô∏è –ü–æ–≥–æ–¥–∞</div>
                    <div class="quick-link" onclick="quickSearch('–Ω–æ–≤–æ—Å—Ç–∏')">üì∞ –ù–æ–≤–æ—Å—Ç–∏</div>
                    <div class="quick-link" onclick="quickSearch('–∫—É—Ä—Å –≤–∞–ª—é—Ç')">üíµ –ö—É—Ä—Å—ã</div>
                    <div class="quick-link" onclick="quickSearch('–∫–∏–Ω–æ')">üé¨ –ö–∏–Ω–æ</div>
                    <div class="quick-link" onclick="quickSearch('–∫–∞—Ä—Ç—ã')">üó∫Ô∏è –ö–∞—Ä—Ç—ã</div>
                    <div class="quick-link" onclick="quickSearch('–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫')">üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</div>
                </div>
            </div>
        </div>

        <!-- –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã -->
        <div class="card" style="margin-top: 30px;">
            <h2 style="text-align: center; margin-bottom: 20px;">üöÄ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã</h2>
            <div class="services-grid">
                <div class="service-card" onclick="openService('jellyfin')">
                    <div class="service-icon">üé¨</div>
                    <div>Jellyfin</div>
                    <div class="service-description">–ú–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä —Å —Ñ–∏–ª—å–º–∞–º–∏</div>
                </div>
                <div class="service-card" onclick="openService('ai-chat')">
                    <div class="service-icon">ü§ñ</div>
                    <div>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
                    <div class="service-description">ChatGPT –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</div>
                </div>
                <div class="service-card" onclick="openService('ai-campus')">
                    <div class="service-icon">üéì</div>
                    <div>AI –ö–∞–º–ø—É—Å</div>
                    <div class="service-description">–î–ª—è —É—á–µ–±—ã</div>
                </div>
                <div class="service-card" onclick="openService('ai-images')">
                    <div class="service-icon">üé®</div>
                    <div>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
                    <div class="service-description">Stable Diffusion</div>
                </div>
                <div class="service-card" onclick="openService('nextcloud')">
                    <div class="service-icon">‚òÅÔ∏è</div>
                    <div>Nextcloud</div>
                    <div class="service-description">–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</div>
                </div>
                <div class="service-card" onclick="openService('admin')">
                    <div class="service-icon">üõ†Ô∏è</div>
                    <div>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</div>
                    <div class="service-description">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</div>
                </div>
                <div class="service-card" onclick="openService('monitoring')">
                    <div class="service-icon">üìä</div>
                    <div>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</div>
                    <div class="service-description">Uptime Kuma</div>
                </div>
                <div class="service-card" onclick="openService('vpn-info')">
                    <div class="service-icon">üîí</div>
                    <div>VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                    <div class="service-description">WireGuard —Å—Ç–∞—Ç—É—Å</div>
                </div>
            </div>
        </div>

        <!-- –°–µ–∫—Ü–∏—è –≤–µ—Ä—Å–∏–∏ -->
        <div class="version-info">
            <span>–í–µ—Ä—Å–∏—è 3.0 | </span>
            <span class="version-link" id="versionLink">–û —Å–∏—Å—Ç–µ–º–µ</span>
        </div>
    </div>

    <script>
        let secretClickCount = 0;
        let lastClickTime = 0;

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        function quickSearch(query) {
            document.querySelector('.yandex-search-input').value = query;
            document.getElementById('yandexSearchForm').submit();
        }

        function openService(service) {
            const services = {
                'jellyfin': '/jellyfin',
                'ai-chat': '/ai-chat',
                'ai-campus': '/ai-campus',
                'ai-images': '/ai-images', 
                'nextcloud': '/nextcloud',
                'admin': '/admin-panel',
                'monitoring': '/monitoring',
                'vpn-info': '/vpn-info'
            };
            
            if (services[service]) { 
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                const token = localStorage.getItem('token');
                if (!token && service !== 'vpn-info') {
                    alert('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                    return;
                }
                window.location.href = services[service];
            } else {
                alert('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é
        document.getElementById('versionLink').addEventListener('click', function(e) {
            const currentTime = new Date().getTime();
            if (currentTime - lastClickTime < 1000) {
                secretClickCount++;
            } else {
                secretClickCount = 1;
            }
            lastClickTime = currentTime;

            if (secretClickCount >= 5) {
                const password = prompt('üîê –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
                if (password === 'LevAdmin') {
                    window.location.href = '/admin-panel?secret=true';
                } else {
                    alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
                }
                secretClickCount = 0;
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const errorElement = document.getElementById('errorMessage');
            
            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                }
                
                const data = await response.json();
                
                if (data.success) {
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    
                    if (data.user.prefix === 'Administrator') {
                        window.location.href = '/admin-panel';
                    } else {
                        window.location.href = '/user-dashboard';
                    }
                } else {
                    showError(data.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                }
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
        });
        
        function showError(message) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 5000);
        }

        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        document.querySelector('.yandex-search-input').focus();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        const token = localStorage.getItem('token');
        if (token) {
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            if (user.prefix === 'Administrator') {
                window.location.href = '/admin-panel';
            } else {
                window.location.href = '/user-dashboard';
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
        document.querySelector('.yandex-search-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('yandexSearchForm').submit();
            }
        });
    </script>
</body>
</html>
MAIN_HTML

# 9. VPN –°–¢–†–ê–ù–ò–¶–ê –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–´–• –£–°–¢–†–û–ô–°–¢–í–ê–• (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üîí –°–æ–∑–¥–∞–Ω–∏–µ VPN —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö..."

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN HTML —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
cat > "/home/$CURRENT_USER/scripts/generate-vpn-html.sh" << 'VPN_HTML_GEN'
#!/bin/bash

CURRENT_USER=$(whoami)
SERVER_IP=$(hostname -I | awk '{print $1}')
VPN_PORT=$(sudo grep ListenPort /etc/wireguard/wg0.conf 2>/dev/null | awk -F= '{print $2}' | tr -d ' ' || echo "51820")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
CLIENT_INFO=""
if sudo systemctl is-active --quiet wg-quick@wg0 2>/dev/null; then
    CLIENT_INFO=$(sudo wg show wg0 2>/dev/null | while read line; do
        if [[ $line == peer:* ]]; then
            PEER_KEY=$(echo $line | awk '{print $2}')
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
            ALLOWED_IPS=$(sudo wg show wg0 | grep -A10 "peer: $PEER_KEY" | grep "allowed ips" | awk '{print $3}')
            LATEST_HANDSHAKE=$(sudo wg show wg0 | grep -A10 "peer: $PEER_KEY" | grep "latest handshake" | awk '{print $3}')
            
            if [ -n "$LATEST_HANDSHAKE" ] && [ "$LATEST_HANDSHAKE" != "0" ]; then
                STATUS="online"
                STATUS_TEXT="Online"
            else
                STATUS="offline" 
                STATUS_TEXT="Offline"
            fi
            
            CLIENT_NAME=$(echo "$ALLOWED_IPS" | cut -d'.' -f4)
            echo "<div class=\"device-item\">
                <span class=\"device-name\">–ö–ª–∏–µ–Ω—Ç $CLIENT_NAME</span>
                <span class=\"device-status $STATUS\">$STATUS_TEXT</span>
                <div class=\"device-ip\">IP: $ALLOWED_IPS</div>
                <div>–°—Ç–∞—Ç—É—Å: $STATUS_TEXT</div>
            </div>"
        fi
    done)
fi

if [ -z "$CLIENT_INFO" ]; then
    CLIENT_INFO='<div class="device-item">
        <span class="device-name">–°–µ—Ä–≤–µ—Ä WireGuard</span>
        <span class="device-status online">Online</span>
        <div class="device-ip">IP: 10.0.0.1</div>
        <div>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: '$(hostname)'</div>
    </div>'
fi

cat > "/home/$CURRENT_USER/docker/heimdall/vpn-info.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1000px; 
            margin: 0 auto; 
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .info-card { 
            background: #2d2d2d; 
            padding: 25px; 
            margin: 20px 0; 
            border-radius: 15px;
            border: 1px solid #444;
        }
        .status { 
            color: #4CAF50; 
            font-weight: bold;
            font-size: 1.2em;
        }
        .status.offline { color: #f44336; }
        .section-title {
            color: #ffdb4d;
            margin-bottom: 15px;
            border-bottom: 2px solid #ffdb4d;
            padding-bottom: 5px;
        }
        .device-list {
            margin-top: 15px;
        }
        .device-item {
            background: #3d3d3d;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border-left: 4px solid #4CAF50;
        }
        .device-name {
            font-weight: bold;
            color: #ffdb4d;
        }
        .device-ip {
            color: #4CAF50;
        }
        .device-status {
            float: right;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        .online { background: #4CAF50; color: white; }
        .offline { background: #f44336; color: white; }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
            font-weight: bold;
        }
        .btn-primary { background: #2196F3; color: white; }
        .btn-warning { background: #ff9800; color: white; }
        .btn-success { background: #4CAF50; color: white; }
        .limitations {
            background: #ffeb3b;
            color: #333;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .limitation-item {
            margin: 5px 0;
        }
        .config-info {
            background: #4CAF50;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            word-break: break-all;
        }
        .qr-code {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîí VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h1>
            <p>WireGuard - –ë—ã—Å—Ç—Ä–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</p>
        </div>
        
        <div class="info-card">
            <h2>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <span class="status" id="serverStatus">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span></h2>
            <p>–ü–æ—Ä—Ç VPN: <strong id="vpnPort">$VPN_PORT</strong></p>
            <p>–¢–∏–ø: WireGuard</p>
            <p>–°–µ—Ä–≤–µ—Ä: <strong>$(hostname)</strong></p>
            <p>IP –∞–¥—Ä–µ—Å: <strong>$SERVER_IP</strong></p>
        </div>

        <div class="info-card">
            <h3 class="section-title">üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
            <div class="device-list" id="deviceList">
                $CLIENT_INFO
            </div>
        </div>

        <div class="info-card">
            <h3 class="section-title">üìã –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</h3>
            <div class="config-info">
                <strong>–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª:</strong> /home/$CURRENT_USER/vpn/client.conf
            </div>
            <p>1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</p>
            <p>2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –≤—ã—à–µ</p>
            <p>3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard</p>
            
            <button class="btn btn-primary" onclick="showConfig()">üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥</button>
            <button class="btn btn-success" onclick="showQR()">üì± –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥</button>
            <button class="btn btn-warning" onclick="testConnection()">üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</button>
            
            <div class="qr-code" id="qrCode" style="display: none;">
                <h4>QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4>
                <div id="qrContent"></div>
            </div>
        </div>

        <div class="limitations">
            <h3>‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è VPN —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</h3>
            <div class="limitation-item">‚ùå –ù–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Ñ–∏–≥</div>
            <div class="limitation-item">‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç VPN –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</div>
            <div class="limitation-item">‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</div>
            <div class="limitation-item">‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ IP</div>
            <div class="limitation-item">‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</div>
        </div>
    </div>

    <script>
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN
        document.getElementById('vpnPort').textContent = '$VPN_PORT';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        function checkServerStatus() {
            fetch('/api/system/check-vpn')
                .then(response => {
                    if (!response.ok) throw new Error('Network error');
                    return response.json();
                })
                .then(data => {
                    const statusElement = document.getElementById('serverStatus');
                    if (data.active) {
                        statusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
                        statusElement.className = 'status';
                    } else {
                        statusElement.textContent = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                        statusElement.className = 'status offline';
                    }
                })
                .catch(() => {
                    const statusElement = document.getElementById('serverStatus');
                    statusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
                    statusElement.className = 'status';
                });
        }

        function showConfig() {
            alert('–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ø—É—Ç–∏:\\n/home/$CURRENT_USER/vpn/client.conf\\n\\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ SSH –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.');
        }

        function showQR() {
            document.getElementById('qrContent').innerHTML = '<p>QR –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...</p><p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:</p><p style="background: #333; color: white; padding: 10px; border-radius: 5px;">qrencode -t ansiutf8 < /home/$CURRENT_USER/vpn/client.conf</p>';
            document.getElementById('qrCode').style.display = 'block';
        }

        function testConnection() {
            alert('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\\n1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç $VPN_PORT –æ—Ç–∫—Ä—ã—Ç\\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞\\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\\n4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: sudo wg show');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        checkServerStatus();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(checkServerStatus, 30000);
    </script>
</body>
</html>
EOF

echo "‚úÖ VPN —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
VPN_HTML_GEN

chmod +x "/home/$CURRENT_USER/scripts/generate-vpn-html.sh"
"/home/$CURRENT_USER/scripts/generate-vpn-html.sh"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN..."

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
cat > "/home/$CURRENT_USER/scripts/vpn-add-client.sh" << 'VPN_CLIENT_EOF'
#!/bin/bash

CLIENT_NAME="$1"
if [ -z "$CLIENT_NAME" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞>"
    exit 1
fi

CURRENT_USER=$(whoami)
SERVER_IP=$(hostname -I | awk '{print $1}')
VPN_PORT=$(sudo grep ListenPort /etc/wireguard/wg0.conf | awk -F= '{print $2}' | tr -d ' ')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
CLIENT_PRIVATE_KEY=$(wg genkey)
CLIENT_PUBLIC_KEY=$(echo "$CLIENT_PRIVATE_KEY" | wg pubkey)

# –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π IP
LAST_IP=$(sudo wg show wg0 2>/dev/null | grep "allowed ips" | awk '{print $3}' | cut -d'/' -f1 | sort -t . -k 4 -n | tail -1)
if [ -z "$LAST_IP" ]; then
    CLIENT_IP="10.0.0.2"
else
    IP_OCTET=$(echo $LAST_IP | cut -d'.' -f4)
    NEXT_OCTET=$((IP_OCTET + 1))
    CLIENT_IP="10.0.0.$NEXT_OCTET"
fi

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
sudo wg set wg0 peer "$CLIENT_PUBLIC_KEY" allowed-ips "${CLIENT_IP}/32"
sudo wg-quick save wg0

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
CLIENT_CONF="/home/$CURRENT_USER/vpn/client_${CLIENT_NAME}.conf"
sudo tee "$CLIENT_CONF" > /dev/null << CLIENT_CONFIG
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = ${CLIENT_IP}/32
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = $(sudo cat /etc/wireguard/public.key)
Endpoint = ${SERVER_IP}:${VPN_PORT}
AllowedIPs = 0.0.0.0/0
CLIENT_CONFIG

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
echo "QR –∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ $CLIENT_NAME:"
if command -v qrencode &> /dev/null; then
    qrencode -t ansiutf8 < "$CLIENT_CONF"
else
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ qrencode –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞"
fi

echo "‚úÖ –ö–ª–∏–µ–Ω—Ç $CLIENT_NAME –¥–æ–±–∞–≤–ª–µ–Ω!"
echo "üìÅ –ö–æ–Ω—Ñ–∏–≥: $CLIENT_CONF"
echo "üåê IP –∞–¥—Ä–µ—Å: $CLIENT_IP"
VPN_CLIENT_EOF

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN
cat > "/home/$CURRENT_USER/scripts/vpn-status.sh" << 'VPN_STATUS_EOF'
#!/bin/bash

echo "=== WireGuard Status ==="
echo "Server IP: $(hostname -I | awk '{print $1}')"
VPN_PORT=$(sudo grep ListenPort /etc/wireguard/wg0.conf 2>/dev/null | awk -F= '{print $2}' | tr -d ' ')
echo "VPN Port: ${VPN_PORT:-51820}"
echo ""

if sudo systemctl is-active --quiet wg-quick@wg0; then
    echo "Status: ‚úÖ Active"
    echo ""
    sudo wg show
    
    echo ""
    echo "=== Connected Clients ==="
    sudo wg show wg0 2>/dev/null | while read line; do
        if [[ $line == peer:* ]]; then
            PEER_KEY=$(echo $line | awk '{print $2}')
            ALLOWED_IPS=$(sudo wg show wg0 | grep -A10 "peer: $PEER_KEY" | grep "allowed ips" | awk '{print $3}')
            LATEST_HANDSHAKE=$(sudo wg show wg0 | grep -A10 "peer: $PEER_KEY" | grep "latest handshake" | awk '{print $3}')
            
            if [ -n "$LATEST_HANDSHAKE" ] && [ "$LATEST_HANDSHAKE" != "0" ]; then
                STATUS="‚úÖ Online"
            else
                STATUS="‚ùå Offline"
            fi
            
            echo "Client: $ALLOWED_IPS - $STATUS"
        fi
    done
else
    echo "Status: ‚ùå Inactive"
fi
VPN_STATUS_EOF

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ VPN
cat > "/home/$CURRENT_USER/scripts/vpn-restart.sh" << 'VPN_RESTART_EOF'
#!/bin/bash

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard..."
sudo systemctl restart wg-quick@wg0
sleep 2

if sudo systemctl is-active --quiet wg-quick@wg0; then
    echo "‚úÖ WireGuard —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    sudo wg show
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ WireGuard"
    sudo systemctl status wg-quick@wg0
fi
VPN_RESTART_EOF

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod +x "/home/$CURRENT_USER/scripts/vpn-add-client.sh"
chmod +x "/home/$CURRENT_USER/scripts/vpn-status.sh"
chmod +x "/home/$CURRENT_USER/scripts/vpn-restart.sh"

# 10. –ë–≠–ö–ï–ù–î –°–ï–†–í–ï–† –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–µ–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."

cat > "/home/$CURRENT_USER/docker/auth-server/requirements.txt" << 'REQUIREMENTS_EOF'
Flask==2.3.3
PyJWT==2.8.0
REQUIREMENTS_EOF

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
AUTH_SECRET=$(openssl rand -hex 32 2>/dev/null || echo "fallback-secret-key-$(date +%s)")

cat > "/home/$CURRENT_USER/docker/auth-server/app.py" << EOF
from flask import Flask, request, jsonify
import json
import jwt
import datetime
from functools import wraps
import os
import subprocess

app = Flask(__name__)
app.config['SECRET_KEY'] = '${AUTH_SECRET}'

USERS_FILE = '/app/data/users/users.json'
LOGS_FILE = '/app/data/logs/audit.log'

def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except:
        return {"users": [], "sessions": {}, "login_attempts": {}, "blocked_ips": []}

def save_users(data):
    with open(USERS_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def log_action(username, action, details, ip):
    try:
        with open(LOGS_FILE, 'r') as f:
            logs = json.load(f)
    except:
        logs = []
    
    logs.append({
        "timestamp": datetime.datetime.now().isoformat(),
        "username": username,
        "action": action,
        "details": details,
        "ip": ip
    })
    
    with open(LOGS_FILE, 'w') as f:
        json.dump(logs, f, indent=2)

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        
        if not token:
            return jsonify({"success": False, "message": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 401
        
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            current_user = data['user']
        except:
            return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}), 401
        
        return f(current_user, *args, **kwargs)
    
    return decorated

def admin_required(f):
    @wraps(f)
    def decorated(current_user, *args, **kwargs):
        if current_user.get('prefix') != 'Administrator':
            return jsonify({"success": False, "message": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}), 403
        return f(current_user, *args, **kwargs)
    return decorated

@app.route('/api/auth/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    ip = request.remote_addr
    
    users_data = load_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
    if ip in users_data.get('blocked_ips', []):
        return jsonify({"success": False, "message": "IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}), 403
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = next((u for u in users_data['users'] if u['username'] == username and u['is_active']), None)
    
    if user and user['password'] == password:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if ip in users_data['login_attempts']:
            del users_data['login_attempts'][ip]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        token = jwt.encode({
            'user': {
                'username': user['username'],
                'prefix': user['prefix'],
                'permissions': user['permissions']
            },
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
        }, app.config['SECRET_KEY'])
        
        log_action(username, "login_success", "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", ip)
        save_users(users_data)
        
        return jsonify({
            "success": True,
            "token": token,
            "user": {
                "username": user['username'],
                "prefix": user['prefix'],
                "permissions": user['permissions']
            }
        })
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        users_data['login_attempts'][ip] = users_data['login_attempts'].get(ip, 0) + 1
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º IP –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        if users_data['login_attempts'][ip] >= 5:
            users_data['blocked_ips'].append(ip)
            log_action("system", "ip_blocked", f"IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞", ip)
        
        log_action(username, "login_failed", "–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞", ip)
        save_users(users_data)
        
        return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401

@app.route('/api/auth/verify', methods=['GET'])
@token_required
def verify_token(current_user):
    return jsonify({"success": True, "user": current_user})

@app.route('/api/system/check-vpn', methods=['GET'])
def check_vpn_status():
    try:
        result = subprocess.run(['systemctl', 'is-active', 'wg-quick@wg0'], capture_output=True, text=True)
        is_active = result.stdout.strip() == 'active'
        
        return jsonify({
            "active": is_active,
            "service": "wireguard"
        })
    except:
        return jsonify({"active": False, "service": "wireguard"})

@app.route('/api/admin/stats', methods=['GET'])
@token_required
@admin_required
def get_stats(current_user):
    users_data = load_users()
    
    return jsonify({
        "totalUsers": len(users_data['users']),
        "activeServices": 8,
        "blockedAttempts": len(users_data.get('blocked_ips', [])),
        "activeSessions": len(users_data.get('sessions', {}))
    })

@app.route('/api/admin/users', methods=['GET'])
@token_required
@admin_required
def get_users(current_user):
    users_data = load_users()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
    users_without_passwords = []
    for user in users_data['users']:
        user_copy = user.copy()
        user_copy.pop('password', None)
        users_without_passwords.append(user_copy)
    
    return jsonify(users_without_passwords)

@app.route('/api/admin/users', methods=['POST'])
@token_required
@admin_required
def add_user(current_user):
    data = request.json
    username = data.get('username')
    password = data.get('password')
    prefix = data.get('prefix', 'User')
    
    users_data = load_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if any(u['username'] == username for u in users_data['users']):
        return jsonify({"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}), 400
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if prefix == 'Administrator':
        permissions = ['all']
    else:
        permissions = ['basic_access']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data['users'].append({
        "username": username,
        "password": password,
        "prefix": prefix,
        "permissions": permissions,
        "created_at": datetime.datetime.now().isoformat(),
        "is_active": True
    })
    
    save_users(users_data)
    log_action(current_user['username'], "user_created", f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}", request.remote_addr)
    
    return jsonify({"success": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"})

@app.route('/api/admin/logs', methods=['GET'])
@token_required
@admin_required
def get_logs(current_user):
    try:
        with open(LOGS_FILE, 'r') as f:
            logs = json.load(f)
        return jsonify(logs[-100:])
    except:
        return jsonify([])

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=False)
EOF

cat > "/home/$CURRENT_USER/docker/auth-server/Dockerfile" << 'DOCKERFILE_EOF'
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 5001

CMD ["python", "app.py"]
DOCKERFILE_EOF

# 11. –£–°–¢–ê–ù–û–í–ö–ê OLLAMA (AI –ê–°–°–ò–°–¢–ï–ù–¢) (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
log "ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama AI..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Ollama
if ! command -v ollama &> /dev/null; then
    log "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama..."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è Ollama
    case "$ARCH" in
        "x86_64") 
            curl -fsSL https://ollama.ai/install.sh | sh
            ;;
        "aarch64"|"armv7l")
            log "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –¥–ª—è ARM..."
            curl -fsSL https://ollama.ai/install.sh | sh
            ;;
        *)
            log "‚ö†Ô∏è  Ollama –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ $ARCH"
            ;;
    esac
else
    log "‚úÖ Ollama —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ñ–∞–π–ª
sudo tee /etc/systemd/system/ollama.service > /dev/null << EOF
[Unit]
Description=Ollama Service
After=network-online.target

[Service]
Type=simple
User=$CURRENT_USER
Group=$CURRENT_USER
ExecStart=/usr/local/bin/ollama serve
Restart=always
RestartSec=3
Environment="OLLAMA_HOST=0.0.0.0"
Environment="HOME=/home/$CURRENT_USER"

[Install]
WantedBy=default.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable ollama

log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Ollama..."
sudo systemctl start ollama
sleep 10

if systemctl is-active --quiet ollama; then
    log "‚úÖ Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
else
    log "‚ö†Ô∏è Ollama –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞..."
    sudo systemctl restart ollama
    sleep 5
fi

# –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –≤ —Ñ–æ–Ω–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –º–µ–Ω—å—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
log "üì• –ó–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏ (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)..."
nohup bash -c 'sleep 30 && ollama pull llama2:7b && echo "AI –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!"' > /dev/null 2>&1 &

# 12. DOCKER-COMPOSE –°–û –í–°–ï–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
log "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Compose —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏..."

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è Docker Compose
cat > "/home/$CURRENT_USER/docker/.env" << DOCKER_ENV
CURRENT_USER=$CURRENT_USER
SERVER_IP=$SERVER_IP
VPN_PORT=51820
DOMAIN=$DOMAIN
DOCKER_ENV

cat > "/home/$CURRENT_USER/docker/docker-compose.yml" << 'DOCKER_EOF'
version: '3.8'

networks:
  server-net:
    driver: bridge

services:
  # –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –Ø–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–æ–º
  nginx-auth:
    image: nginx:alpine
    container_name: nginx-auth
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./heimdall:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - server-net

  # –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  auth-server:
    build: ./auth-server
    container_name: auth-server
    restart: unless-stopped
    volumes:
      - /home/${CURRENT_USER}/data:/app/data
    networks:
      - server-net

  # Jellyfin - –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "8096:8096"
    volumes:
      - ./jellyfin:/config
      - /home/${CURRENT_USER}/media:/media
    networks:
      - server-net

  # AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç - ChatGPT
  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    restart: unless-stopped
    ports:
      - "11435:8080"
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - server-net

  # AI –ö–∞–º–ø—É—Å - –¥–ª—è —É—á–µ–±—ã
  ai-campus:
    build: ./ai-campus
    container_name: ai-campus
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - server-net

  # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Stable Diffusion
  stable-diffusion:
    image: lscr.io/linuxserver/stablediffusion-webui:latest
    container_name: stable-diffusion
    restart: unless-stopped
    ports:
      - "7860:7860"
    volumes:
      - ./stable-diffusion:/config
    environment:
      - TZ=Europe/Moscow
    networks:
      - server-net

  # Nextcloud
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nextcloud:/var/www/html
    networks:
      - server-net

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./uptime-kuma:/app/data
    networks:
      - server-net
DOCKER_EOF

# 13. NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–û –í–°–ï–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏..."

cat > "/home/$CURRENT_USER/docker/nginx.conf" << 'NGINX_EOF'
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    upstream auth_server {
        server auth-server:5001;
    }

    server {
        listen 80;
        server_name _;

        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ø–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–æ–º
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ @fallback;
        }

        location @fallback {
            return 302 /;
        }

        # VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        location /vpn-info {
            root /usr/share/nginx/html;
            try_files /vpn-info.html =404;
        }

        # API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        location /api/ {
            proxy_pass http://auth_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ Jellyfin
        location /jellyfin/ {
            proxy_pass http://jellyfin:8096/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (ChatGPT)
        location /ai-chat/ {
            proxy_pass http://ollama-webui:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ AI –ö–∞–º–ø—É—Å
        location /ai-campus/ {
            proxy_pass http://ai-campus:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        location /ai-images/ {
            proxy_pass http://stable-diffusion:7860/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ Nextcloud
        location /nextcloud/ {
            proxy_pass http://nextcloud:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # –ü—Ä–æ–∫—Å–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        location /monitoring/ {
            proxy_pass http://uptime-kuma:3001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
NGINX_EOF

# 14. AI –ö–ê–ú–ü–£–° –î–õ–Ø –£–ß–ï–ë–´ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
log "üéì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ö–∞–º–ø—É—Å–∞..."

cat > "/home/$CURRENT_USER/docker/ai-campus/Dockerfile" << 'CAMPUS_DOCKERFILE'
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "app.py"]
CAMPUS_DOCKERFILE

cat > "/home/$CURRENT_USER/docker/ai-campus/requirements.txt" << 'CAMPUS_REQUIREMENTS'
Flask==2.3.3
requests==2.31.0
CAMPUS_REQUIREMENTS

cat > "/home/$CURRENT_USER/docker/ai-campus/app.py" << 'CAMPUS_PYTHON'
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>AI –ö–∞–º–ø—É—Å - –¥–ª—è —É—á–µ–±—ã</title>
        <style>
            body { font-family: Arial; margin: 40px; background: #f0f2f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            h1 { color: #2c3e50; }
            .chat-box { border: 1px solid #ddd; padding: 20px; height: 400px; overflow-y: auto; margin: 20px 0; }
            .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
            .user { background: #3498db; color: white; text-align: right; }
            .ai { background: #ecf0f1; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéì AI –ö–∞–º–ø—É—Å - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã</h1>
            <p>–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º</p>
            <div class="chat-box" id="chatBox">
                <div class="message ai">ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ñ–∏–∑–∏–∫–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º!</div>
            </div>
            <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." style="width: 70%; padding: 10px;">
            <button onclick="sendMessage()" style="padding: 10px 20px;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
        <script>
            function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value;
                if (!message) return;
                
                const chatBox = document.getElementById('chatBox');
                chatBox.innerHTML += `<div class="message user">üë§ ${message}</div>`;
                
                // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
                setTimeout(() => {
                    chatBox.innerHTML += `<div class="message ai">ü§ñ –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É "${message}" –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å...</div>`;
                    chatBox.scrollTop = chatBox.scrollHeight;
                }, 1000);
                
                input.value = '';
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        </script>
    </body>
    </html>
    '''

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
CAMPUS_PYTHON

# 15. –°–ö–†–ò–ü–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

# –°–∫—Ä–∏–ø—Ç —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
cat > "/home/$CURRENT_USER/scripts/change-password.sh" << 'PASSWORD_EOF'
#!/bin/bash

echo "=== –°–ò–°–¢–ï–ú–ê –°–ú–ï–ù–´ –ü–ê–†–û–õ–Ø ==="
echo "–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –º–µ–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ"
echo ""

read -s -p "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: " CURRENT_PASS
echo
read -s -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " NEW_PASS
echo
read -s -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " NEW_PASS_CONFIRM
echo

if [ "$NEW_PASS" != "$NEW_PASS_CONFIRM" ]; then
    echo "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
    exit 1
fi

python3 << PYTHON_EOF
import json
import sys
import os

current_user = os.getenv('USER')
current_pass = "$CURRENT_PASS"
new_pass = "$NEW_PASS"

try:
    with open(f'/home/{current_user}/data/users/users.json', 'r') as f:
        data = json.load(f)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    user_updated = False
    for user in data['users']:
        if user['username'] == 'admin' and user['password'] == current_pass:
            user['password'] = new_pass
            user_updated = True
            break
    
    if not user_updated:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!")
        sys.exit(1)
    
    with open(f'/home/{current_user}/data/users/users.json', 'w') as f:
        json.dump(data, f, indent=2)
    
    print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"
    print("üîÑ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1)
PYTHON_EOF
PASSWORD_EOF

# –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cat > "/home/$CURRENT_USER/scripts/add-user.sh" << 'ADD_USER_EOF'
#!/bin/bash

echo "=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==="
read -p "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: " USERNAME
read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " PASSWORD
echo
read -p "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å (User/Administrator): " PREFIX

python3 << PYTHON_EOF
import json
import sys
import datetime
import os

username = "$USERNAME"
password = "$PASSWORD"
prefix = "$PREFIX"
current_user = os.getenv('USER')

if prefix not in ["User", "Administrator"]:
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ User –∏–ª–∏ Administrator")
    sys.exit(1)

try:
    with open(f'/home/{current_user}/data/users/users.json', 'r') as f:
        data = json.load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if any(u['username'] == username for u in data['users']):
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞
    if prefix == "Administrator":
        permissions = ["all"]
    else:
        permissions = ["basic_access"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data['users'].append({
        "username": username,
        "password": password,
        "prefix": prefix,
        "permissions": permissions,
        "created_at": datetime.datetime.now().isoformat(),
        "is_active": True
    })
    
    with open(f'/home/{current_user}/data/users/users.json', 'w') as f:
        json.dump(data, f, indent=2)
    
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    print(f"üë§ –õ–æ–≥–∏–Ω: {username}")
    print(f"üõ°Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1)
PYTHON_EOF
ADD_USER_EOF

chmod +x "/home/$CURRENT_USER/scripts/change-password.sh"
chmod +x "/home/$CURRENT_USER/scripts/add-user.sh"

# 16. –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º)
log "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

cd "/home/$CURRENT_USER/docker" || exit

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
PORTS=(80 8096 11435 5000 7860 8080 3001)
for port in "${PORTS[@]}"; do
    if ss -tulpn | grep ":$port " > /dev/null; then
        log "‚ö†Ô∏è –ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç, –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
    fi
done

# –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
log "üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d

# –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

# 17. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò –û–ß–ò–°–¢–ö–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏..."

mkdir -p "/home/$CURRENT_USER/backups"
cat > "/home/$CURRENT_USER/scripts/backup-system.sh" << 'BACKUP_EOF'
#!/bin/bash
BACKUP_DIR="/home/$(whoami)/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/full-backup-$DATE.tar.gz"

echo "[$(date)] Starting backup and cleanup..." >> "$BACKUP_DIR/backup.log"

# 1. –°–û–ó–î–ê–ù–ò–ï BACKUP (–±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤)
echo "[$(date)] Creating backup..." >> "$BACKUP_DIR/backup.log"
tar -czf "$BACKUP_FILE" \
  /home/$(whoami)/docker \
  /home/$(whoami)/data \
  /home/$(whoami)/media \
  /etc/wireguard 2>/dev/null || echo "Backup completed with warnings"

# 2. –ê–í–¢–û–û–ß–ò–°–¢–ö–ê - —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
echo "[$(date)] Starting cleanup..." >> "$BACKUP_DIR/backup.log"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
find "/home/$(whoami)/media/temp" -type f -mtime +7 -delete 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
find "/home/$(whoami)/data/logs" -name "*.log" -mtime +30 -delete 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Docker
docker system prune -f --filter "until=168h" 2>/dev/null || true

# 3. –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• BACKUP (—Ö—Ä–∞–Ω–∏–º 14 –¥–Ω–µ–π)
find "$BACKUP_DIR" -name "full-backup-*.tar.gz" -mtime +14 -delete 2>/dev/null || true

# 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï VPN –°–¢–†–ê–ù–ò–¶–´
/home/$(whoami)/scripts/generate-vpn-html.sh

echo "[$(date)] Backup and cleanup completed: $BACKUP_FILE" >> "$BACKUP_DIR/backup.log"
echo "Cleaned: temp files (7+ days), logs (30+ days), old backups (14+ days)" >> "$BACKUP_DIR/backup.log"
BACKUP_EOF

chmod +x "/home/$CURRENT_USER/scripts/backup-system.sh"

# 18. –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."

cat > "/home/$CURRENT_USER/scripts/system-monitor.sh" << 'MONITOR_EOF'
#!/bin/bash
LOG_FILE="/home/$(whoami)/data/logs/system-stats.log"
mkdir -p "$(dirname "$LOG_FILE")"

{
    echo "=== System Stats $(date) ==="
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}')%"
    echo "RAM: $(free -h | grep Mem | awk '{print $3"/"$2}')"
    echo "Disk: $(df -h / | awk 'NR==2{print $3"/"$2" ("$5")"}')"
    echo "Docker: $(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -v NAMES 2>/dev/null || echo "No containers")"
    echo "Services:"
    systemctl is-active --quiet wg-quick@wg0 && echo "  VPN: ‚úÖ" || echo "  VPN: ‚ùå"
    docker ps 2>/dev/null | grep -q jellyfin && echo "  Jellyfin: ‚úÖ" || echo "  Jellyfin: ‚ùå"
    echo "================================="
} >> "$LOG_FILE"

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
tail -n 1000 "$LOG_FILE" > "${LOG_FILE}.tmp" 2>/dev/null && mv "${LOG_FILE}.tmp" "$LOG_FILE" 2>/dev/null || true
MONITOR_EOF

chmod +x "/home/$CURRENT_USER/scripts/system-monitor.sh"

# 19. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
log "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."

cat > "/home/$CURRENT_USER/scripts/security-updates.sh" << 'SECURITY_EOF'
#!/bin/bash
LOG_FILE="/home/$(whoami)/data/logs/security-updates.log"

{
    echo "=== Security Updates $(date) ==="
    
    # –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´
    echo "1. Updating system packages..."
    sudo apt update >> "$LOG_FILE" 2>&1
    sudo apt upgrade -y >> "$LOG_FILE" 2>&1
    
    # –û–ë–ù–û–í–õ–ï–ù–ò–ï DOCKER –û–ë–†–ê–ó–û–í
    echo "2. Updating Docker images..."
    cd /home/$(whoami)/docker && docker-compose pull >> "$LOG_FILE" 2>&1
    
    # –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í –° –û–ë–ù–û–í–õ–ï–ù–ò–Ø–ú–ò
    echo "3. Restarting services..."
    cd /home/$(whoami)/docker && docker-compose up -d >> "$LOG_FILE" 2>&1
    
    # –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
    echo "4. Cleaning up..."
    sudo apt autoremove -y >> "$LOG_FILE" 2>&1
    docker system prune -f >> "$LOG_FILE" 2>&1
    
    echo "Security update completed at $(date)"
    echo "================================="
} >> "$LOG_FILE"
SECURITY_EOF

chmod +x "/home/$CURRENT_USER/scripts/security-updates.sh"

# 20. –ù–ê–°–¢–†–û–ô–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ SSH (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
log "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SSH..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–º—Å–∫–æ–µ –≤—Ä–µ–º—è
sudo timedatectl set-timezone Asia/Yekaterinburg

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –∑–∞–¥–∞—á–∏
(
    crontab -l 2>/dev/null | grep -v 'backup-system.sh' | grep -v 'security-updates.sh' | grep -v 'system-monitor.sh' | grep -v 'generate-vpn-html.sh'
    echo "0 18 * * * /home/$CURRENT_USER/scripts/backup-system.sh >/dev/null 2>&1"      # 23:00 Perm (UTC+5)
    echo "0 19 * * * /home/$CURRENT_USER/scripts/security-updates.sh >/dev/null 2>&1"   # 00:00 Perm (UTC+5)
    echo "*/5 * * * * /home/$CURRENT_USER/scripts/system-monitor.sh >/dev/null 2>&1"    # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    echo "0 */6 * * * /home/$CURRENT_USER/scripts/generate-vpn-html.sh >/dev/null 2>&1" # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
) | crontab -

# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ SSH (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
if [ "${DISABLE_SSH_HARDENING:-no}" != "yes" ]; then
    sudo sed -i 's/#\?PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config
    # PasswordAuthentication –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban
sudo tee /etc/fail2ban/jail.local > /dev/null << FAIL2BAN_EOF
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
FAIL2BAN_EOF

sudo systemctl enable fail2ban
sudo systemctl restart fail2ban

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
log "üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã: $(date)"
log "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ cron:"
crontab -l

# 21. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò
echo ""
echo "=========================================="
echo "üéâ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù–ê!"
echo "=========================================="
echo ""
echo "üîç –í–´–ü–û–õ–ù–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ü–†–û–í–ï–†–û–ö..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
sudo systemctl is-active --quiet docker && echo "‚úÖ Docker: –∑–∞–ø—É—â–µ–Ω" || echo "‚ùå Docker: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
sudo systemctl is-active --quiet wg-quick@wg0 && echo "‚úÖ WireGuard: –∑–∞–ø—É—â–µ–Ω" || echo "‚ö†Ô∏è WireGuard: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
sudo systemctl is-active --quiet ollama && echo "‚úÖ Ollama: –∑–∞–ø—É—â–µ–Ω" || echo "‚ö†Ô∏è Ollama: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
cd "/home/$CURRENT_USER/docker" && docker-compose ps

echo ""
echo "üåê –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: http://$SERVER_IP"
echo ""
echo "üîê –£–ß–ï–¢–ù–´–ï –ó–ê–ü–ò–°–ò:"
echo "   üëë Administrator:"
echo "     - admin / LevAdmin (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"
echo ""
echo "   üë• Users:"
echo "     - user1 / user123 (–±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø)"  
echo "     - test / test123 (–±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø)"
echo ""
echo "üöÄ –í–°–ï –°–ï–†–í–ò–°–´:"
echo "   üé¨ Jellyfin: http://$SERVER_IP/jellyfin"
echo "   ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (ChatGPT): http://$SERVER_IP/ai-chat"
echo "   üéì AI –ö–∞–º–ø—É—Å (–¥–ª—è —É—á–µ–±—ã): http://$SERVER_IP/ai-campus"
echo "   üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: http://$SERVER_IP/ai-images"
echo "   üîí VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: http://$SERVER_IP/vpn-info"
echo "   ‚òÅÔ∏è Nextcloud: http://$SERVER_IP/nextcloud"
echo "   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://$SERVER_IP/monitoring"
echo ""
echo "üîí VPN –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
echo "   –ü–æ—Ä—Ç: 51820"
echo "   –¢–∏–ø: WireGuard"
echo "   –ö–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞: /home/$CURRENT_USER/vpn/client.conf"
echo ""
echo "üîß –°–ï–ö–†–ï–¢–ù–´–ô –†–ê–ó–î–ï–õ:"
echo "   - –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ '–û —Å–∏—Å—Ç–µ–º–µ' –Ω–∞ –≥–ª–∞–≤–Ω–æ–π (5 —Ä–∞–∑)"
echo "   - –ü–∞—Ä–æ–ª—å: LevAdmin"
echo ""
echo "üõ†Ô∏è –°–ö–†–ò–ü–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:"
echo "   üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è: /home/$CURRENT_USER/scripts/change-password.sh"
echo "   üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /home/$CURRENT_USER/scripts/add-user.sh"
echo "   üîí VPN —Å—Ç–∞—Ç—É—Å: /home/$CURRENT_USER/scripts/vpn-status.sh"
echo "   üîÑ VPN –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: /home/$CURRENT_USER/scripts/vpn-restart.sh"
echo "   ‚ûï –î–æ–±–∞–≤–∏—Ç—å VPN –∫–ª–∏–µ–Ω—Ç–∞: /home/$CURRENT_USER/scripts/vpn-add-client.sh <–∏–º—è>"
echo ""
echo "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:"
echo "   –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose ps"
echo "   –õ–æ–≥–∏: docker-compose logs"
echo "   VPN —Å—Ç–∞—Ç—É—Å: sudo wg show"
echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:"
echo "   1. –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å admin –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!"
echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç 51820 –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ"
echo "   3. AI –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è"
echo "   4. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É"
echo ""
echo "=========================================="
echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
echo "=========================================="
