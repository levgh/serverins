#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DOMAIN="domenforserver123"
TOKEN="7c4ac80c-d14f-4ca6-ae8c-df2b04a939ae"
USERNAME=$(whoami)
SERVER_IP=$(hostname -I | awk '{print $1}')
DUCKDNS_URL="$DOMAIN.duckdns.org"

echo "=========================================="
echo "üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –î–û–ú–ê–®–ù–ï–ì–û –°–ï–†–í–ï–†–ê"
echo "=========================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

# 1. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´
log "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
sudo apt update && sudo apt upgrade -y

# 2. –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
log "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt install -y \
  curl wget git \
  docker.io docker-compose \
  apache2 mysql-server \
  php php-curl php-gd php-mysql php-xml php-zip php-mbstring php-intl \
  cron nano htop tree unzip net-tools wireguard resolvconf

# 3. –ù–ê–°–¢–†–û–ô–ö–ê DOCKER
log "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker..."
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER
newgrp docker << EOF
EOF

# 4. –ù–ê–°–¢–†–û–ô–ö–ê –ß–ê–°–û–í–û–ì–û –ü–û–Ø–°–ê
log "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏..."
sudo timedatectl set-timezone Europe/Moscow

# 5. –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–ê–¢–ò–ß–ï–°–ö–û–ì–û IP
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP..."
INTERFACE=$(ip route | grep default | awk '{print $5}')
CURRENT_IP=$(hostname -I | awk '{print $1}')
GATEWAY=$(ip route | grep default | awk '{print $3}')
NETWORK=$(ip route | grep link | head -1 | awk '{print $1}')

sudo tee /etc/netplan/01-static-ip.yaml > /dev/null << EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    $INTERFACE:
      dhcp4: no
      addresses: [$CURRENT_IP/24]
      gateway4: $GATEWAY
      nameservers:
        addresses: [8.8.8.8, 1.1.1.1]
EOF

sudo netplan apply

# 6. –ù–ê–°–¢–†–û–ô–ö–ê DUCKDNS
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDNS..."
mkdir -p /home/$USER/scripts

cat > /home/$USER/scripts/duckdns-update.sh << EOF
#!/bin/bash
DOMAIN="$DOMAIN"
TOKEN="$TOKEN"
URL="https://www.duckdns.org/update?domains=\${DOMAIN}&token=\${TOKEN}&ip="
response=\$(curl -s -w "\n%{http_code}" "\$URL")
http_code=\$(echo "\$response" | tail -n1)
content=\$(echo "\$response" | head -n1)
echo "\$(date): HTTP \$http_code - \$content" >> "/home/$USER/scripts/duckdns.log"
EOF

chmod +x /home/$USER/scripts/duckdns-update.sh

# –î–æ–±–∞–≤–ª—è–µ–º –≤ Cron
(crontab -l 2>/dev/null; echo "*/5 * * * * /home/$USER/scripts/duckdns-update.sh") | crontab -
/home/$USER/scripts/duckdns-update.sh

# 7. –ù–ê–°–¢–†–û–ô–ö–ê WIREGUARD VPN –î–õ–Ø HIDDIFY
log "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WireGuard VPN –¥–ª—è Hiddify..."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
mkdir -p /home/$USER/wireguard
cd /home/$USER/wireguard

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Å–µ—Ä–≤–µ—Ä–∞
wg genkey | tee server_private.key | wg pubkey > server_public.key
wg genkey | tee client_private.key | wg pubkey > client_public.key

SERVER_PRIVATE_KEY=$(cat server_private.key)
SERVER_PUBLIC_KEY=$(cat server_public.key)
CLIENT_PRIVATE_KEY=$(cat client_private.key)
CLIENT_PUBLIC_KEY=$(cat client_public.key)

# –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è WireGuard
WIREGUARD_PORT=$(( ( RANDOM % 10000 ) + 20000 ))

# –ö–æ–Ω—Ñ–∏–≥ —Å–µ—Ä–≤–µ—Ä–∞ WireGuard
sudo tee /etc/wireguard/wg0.conf > /dev/null << EOF
[Interface]
PrivateKey = $SERVER_PRIVATE_KEY
Address = 10.0.0.1/24
ListenPort = $WIREGUARD_PORT
SaveConfig = true
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $INTERFACE -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $INTERFACE -j MASQUERADE

[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = 10.0.0.2/32
EOF

# –ö–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Hiddify
cat > /home/$USER/wireguard/client.conf << EOF
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = 10.0.0.2/24
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
Endpoint = $DUCKDNS_URL:$WIREGUARD_PORT
AllowedIPs = 0.0.0.0/0
EOF

# –í–∫–ª—é—á–∞–µ–º IP forwarding
echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

# –ó–∞–ø—É—Å–∫–∞–µ–º WireGuard
sudo systemctl enable wg-quick@wg0
sudo systemctl start wg-quick@wg0

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –≤ —Ñ–∞–µ—Ä–≤–æ–ª–µ
sudo ufw allow $WIREGUARD_PORT/udp

# 8. –°–û–ó–î–ê–ù–ò–ï –ü–ê–ü–û–ö –î–õ–Ø –°–ï–†–í–ò–°–û–í
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
mkdir -p /home/$USER/docker/{jellyfin,tribler,jackett,overseerr,heimdall,uptime-kuma,vaultwarden,homepage,radarr,sonarr,bazarr,qbittorrent}
mkdir -p /home/$USER/media/{movies,tv,streaming,music,downloads}
mkdir -p /home/$USER/backups

# 9. –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í –ß–ï–†–ï–ó DOCKER-COMPOSE
log "üê≥ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."

cat > /home/$USER/docker/docker-compose.yml << EOF
version: '3.8'

networks:
  server-net:
    driver: bridge

services:
  # Jellyfin - –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "8096:8096"
    volumes:
      - /home/$USER/docker/jellyfin:/config
      - /home/$USER/media:/media
      - /home/$USER/media/streaming:/media/streaming
    environment:
      - TZ=Europe/Moscow
    networks:
      - server-net

  # Radarr - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞–º–∏
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    ports:
      - "7878:7878"
    volumes:
      - /home/$USER/docker/radarr:/config
      - /home/$USER/media/movies:/movies
      - /home/$USER/media/downloads:/downloads
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # Sonarr - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞–º–∏
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    ports:
      - "8989:8989"
    volumes:
      - /home/$USER/docker/sonarr:/config
      - /home/$USER/media/tv:/tv
      - /home/$USER/media/downloads:/downloads
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # Bazarr - —Å—É–±—Ç–∏—Ç—Ä—ã
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    ports:
      - "6767:6767"
    volumes:
      - /home/$USER/docker/bazarr:/config
      - /home/$USER/media:/media
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # qBittorrent - —Ç–æ—Ä—Ä–µ–Ω—Ç-–∫–ª–∏–µ–Ω—Ç
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - /home/$USER/docker/qbittorrent:/config
      - /home/$USER/media/downloads:/downloads
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
      - WEBUI_PORT=8080
    networks:
      - server-net

  # Jackett - –ø–æ–∏—Å–∫ –ø–æ —Ç—Ä–µ–∫–µ—Ä–∞–º
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    ports:
      - "9117:9117"
    volumes:
      - /home/$USER/docker/jackett:/config
      - /home/$USER/media/downloads:/downloads
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # Overseerr - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—Ä–æ—Å–æ–≤
  overseerr:
    image: linuxserver/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    ports:
      - "5055:5055"
    volumes:
      - /home/$USER/docker/overseerr:/config
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # Heimdall - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - /home/$USER/docker/heimdall:/config
    environment:
      - TZ=Europe/Moscow
      - PUID=1000
      - PGID=1000
    networks:
      - server-net

  # Uptime Kuma - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - /home/$USER/docker/uptime-kuma:/app/data
    environment:
      - TZ=Europe/Moscow
    networks:
      - server-net

  # Vaultwarden - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - /home/$USER/docker/vaultwarden/data:/data
    environment:
      - TZ=Europe/Moscow
      - ADMIN_TOKEN=admin
      - SIGNUPS_ALLOWED=true
    networks:
      - server-net

  # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  homepage:
    image: nginx:alpine
    container_name: homepage
    restart: unless-stopped
    ports:
      - "8088:80"
    volumes:
      - /home/$USER/docker/homepage:/usr/share/nginx/html
    networks:
      - server-net
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
cd /home/$USER/docker
docker-compose up -d

# 10. –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –§–ò–õ–¨–ú–û–í
log "üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤..."

cat > /home/$USER/scripts/auto-movie-search.sh << 'EOF'
#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
search_and_download_movie() {
    local movie_name="$1"
    
    echo "[$(date '+%H:%M:%S')] –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: $movie_name"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Overseerr API –¥–ª—è –ø–æ–∏—Å–∫–∞
    SEARCH_RESULT=$(curl -s "http://localhost:5055/api/v1/search?query=${movie_name}" | jq -r '.results[0]')
    
    if [ "$SEARCH_RESULT" != "null" ]; then
        MOVIE_ID=$(echo "$SEARCH_RESULT" | jq -r '.id')
        MOVIE_TITLE=$(echo "$SEARCH_RESULT" | jq -r '.mediaInfo.title // .title')
        
        echo "[$(date '+%H:%M:%S')] –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º: $MOVIE_TITLE (ID: $MOVIE_ID)"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–ª—å–º —á–µ—Ä–µ–∑ Overseerr
        curl -X POST "http://localhost:5055/api/v1/request" \
            -H "Content-Type: application/json" \
            -d "{\"mediaId\": $MOVIE_ID, \"mediaType\": \"movie\"}"
        
        echo "[$(date '+%H:%M:%S')] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: $MOVIE_TITLE"
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Ñ–∏–ª—å–º —Å–∫–∞—á–∞–µ—Ç—Å—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        while true; do
            sleep 30
            MOVIE_STATUS=$(curl -s "http://localhost:5055/api/v1/movie/$MOVIE_ID" | jq -r '.status')
            
            if [ "$MOVIE_STATUS" == "available" ]; then
                echo "[$(date '+%H:%M:%S')] –§–∏–ª—å–º –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É: $MOVIE_TITLE"
                break
            fi
        done
    else
        echo "[$(date '+%H:%M:%S')] –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: $movie_name"
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
while true; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ Overseerr
    PENDING_REQUESTS=$(curl -s "http://localhost:5055/api/v1/request?take=10&skip=0" | jq -r '.results[] | select(.status == "pending") | .id')
    
    for request_id in $PENDING_REQUESTS; do
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        REQUEST_INFO=$(curl -s "http://localhost:5055/api/v1/request/$request_id")
        MOVIE_TITLE=$(echo "$REQUEST_INFO" | jq -r '.media.title')
        
        echo "[$(date '+%H:%M:%S')] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: $MOVIE_TITLE"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        curl -X POST "http://localhost:5055/api/v1/request/$request_id/approve" \
            -H "Content-Type: application/json"
    done
    
    sleep 60
done
EOF

chmod +x /home/$USER/scripts/auto-movie-search.sh

# 11. –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–°–ú–û–¢–†–ï–ù–ù–´–• –§–ò–õ–¨–ú–û–í
log "üóëÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤..."

cat > /home/$USER/scripts/clean-watched-movies.sh << 'EOF'
#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
clean_watched_movies() {
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ Jellyfin API
    JELLYFIN_API_KEY=$(cat /home/$USER/docker/jellyfin/data/data/authentication.db | sqlite3 -cmd "SELECT * FROM ApiKeys;" | head -1 | cut -d'|' -f2)
    
    if [ -n "$JELLYFIN_API_KEY" ]; then
        WATCHED_MOVIES=$(curl -s -H "X-Emby-Token: $JELLYFIN_API_KEY" \
            "http://localhost:8096/Items?Recursive=true&IncludeItemTypes=Movie&Filters=IsPlayed" | \
            jq -r '.Items[] | select(.UserData.Played == true) | .Id')
        
        for movie_id in $WATCHED_MOVIES; do
            MOVIE_INFO=$(curl -s -H "X-Emby-Token: $JELLYFIN_API_KEY" "http://localhost:8096/Items/$movie_id")
            MOVIE_TITLE=$(echo "$MOVIE_INFO" | jq -r '.Name')
            MOVIE_PATH=$(echo "$MOVIE_INFO" | jq -r '.Path')
            
            echo "[$(date '+%H:%M:%S')] –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º: $MOVIE_TITLE"
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–∏–ª—å–º–∞
            if [ -f "$MOVIE_PATH" ]; then
                rm -f "$MOVIE_PATH"
                echo "[$(date '+%H:%M:%S')] –§–∞–π–ª —É–¥–∞–ª–µ–Ω: $MOVIE_PATH"
            fi
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Radarr
            RADARR_API_KEY=$(cat /home/$USER/docker/radarr/config.xml | grep -oP '<ApiKey>\K[^<]+')
            if [ -n "$RADARR_API_KEY" ]; then
                MOVIE_DB_ID=$(echo "$MOVIE_INFO" | jq -r '.ProviderIds.Tmdb')
                if [ "$MOVIE_DB_ID" != "null" ]; then
                    curl -X DELETE "http://localhost:7878/api/v3/movie/$MOVIE_DB_ID?deleteFiles=true" \
                        -H "X-Api-Key: $RADARR_API_KEY"
                fi
            fi
        done
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
while true; do
    clean_watched_movies
    sleep 600
done
EOF

chmod +x /home/$USER/scripts/clean-watched-movies.sh

# 12. –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø –°–ò–°–¢–ï–ú–´
log "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Å–∏—Å—Ç–µ–º—ã..."

cat > /home/$USER/scripts/change-password.sh << 'EOF'
#!/bin/bash

echo "üîê –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø –°–ò–°–¢–ï–ú–´"
echo "========================"

read -sp "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: " current_pass
echo
read -sp "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " new_pass1
echo
read -sp "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " new_pass2
echo

if [ "$new_pass1" != "$new_pass2" ]; then
    echo "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
echo "$USER:$current_pass" | sudo chpasswd > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!"
    exit 1
fi

# –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
echo "$USER:$new_pass1" | sudo chpasswd

if [ $? -eq 0 ]; then
    echo "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
    sed -i "s/homeserver/$new_pass1/g" /home/$USER/docker/homepage/index.html 2>/dev/null
    echo "‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è!"
fi
EOF

chmod +x /home/$USER/scripts/change-password.sh

# 13. –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–ß–ê–ô–ù–´–• –ü–û–†–¢–û–í –î–õ–Ø –ê–ù–û–ù–ò–ú–ù–û–°–¢–ò
log "üé≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤..."

cat > /home/$USER/scripts/random-ports.sh << 'EOF'
#!/bin/bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
generate_random_port() {
    echo $(( (RANDOM % 10000) + 20000 ))
}

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—ã –≤ docker-compose.yml
sed -i "s/8096:8096/$(generate_random_port):8096/g" /home/$USER/docker/docker-compose.yml
sed -i "s/7878:7878/$(generate_random_port):7878/g" /home/$USER/docker/docker-compose.yml
sed -i "s/8989:8989/$(generate_random_port):8989/g" /home/$USER/docker/docker-compose.yml
sed -i "s/5055:5055/$(generate_random_port):5055/g" /home/$USER/docker/docker-compose.yml
sed -i "s/3001:3001/$(generate_random_port):3001/g" /home/$USER/docker/docker-compose.yml
sed -i "s/8000:80/$(generate_random_port):80/g" /home/$USER/docker/docker-compose.yml

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
cd /home/$USER/docker
docker-compose down
docker-compose up -d

echo "‚úÖ –ü–æ—Ä—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ"
EOF

chmod +x /home/$USER/scripts/random-ports.sh

# 14. –ù–ê–°–¢–†–û–ô–ö–ê JELLYFIN –° –ö–ù–û–ü–ö–û–ô –ü–û–ò–°–ö–ê
log "üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jellyfin —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∏—Å–∫–∞..."

cat > /home/$USER/scripts/setup-jellyfin-search.sh << 'JELLYFINEOF'
#!/bin/bash

echo "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Jellyfin —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∏—Å–∫–∞..."

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Jellyfin
sleep 30

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
cat > /home/$USER/docker/jellyfin/custom.css << 'CSSEOF'
/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ */
.search-button {
    background: linear-gradient(135deg, #FF6B00, #FF8C00) !important;
    border: none !important;
    border-radius: 25px !important;
    padding: 12px 24px !important;
    font-weight: bold !important;
    margin: 10px !important;
    box-shadow: 0 4px 15px rgba(255, 107, 0, 0.3) !important;
    transition: all 0.3s ease !important;
}

.search-button:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 6px 20px rgba(255, 107, 0, 0.4) !important;
}

.netflix-style {
    background: linear-gradient(135deg, #141414, #1a1a1a) !important;
}
CSSEOF

echo "Jellyfin –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∏—Å–∫–∞!"
JELLYFINEOF

chmod +x /home/$USER/scripts/setup-jellyfin-search.sh
nohup /home/$USER/scripts/setup-jellyfin-search.sh > /dev/null 2>&1 &

# 15. –ó–ê–ü–£–°–ö –§–û–ù–û–í–´–• –°–ö–†–ò–ü–¢–û–í
log "üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
nohup /home/$USER/scripts/auto-movie-search.sh > /dev/null 2>&1 &

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
nohup /home/$USER/scripts/clean-watched-movies.sh > /dev/null 2>&1 &

# 16. –ù–ê–°–¢–†–û–ô–ö–ê CRON –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ó–ê–î–ê–ß
log "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á..."

(crontab -l 2>/dev/null; echo "@reboot /home/$USER/scripts/auto-movie-search.sh > /dev/null 2>&1") | crontab -
(crontab -l 2>/dev/null; echo "@reboot /home/$USER/scripts/clean-watched-movies.sh > /dev/null 2>&1") | crontab -
(crontab -l 2>/dev/null; echo "0 3 * * * /home/$USER/scripts/cleanup_streaming.sh > /dev/null 2>&1") | crontab -
(crontab -l 2>/dev/null; echo "0 4 * * 1 /home/$USER/scripts/random-ports.sh > /dev/null 2>&1") | crontab -

# 17. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
echo ""
echo "=========================================="
echo "üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "=========================================="
echo ""
echo "üåê –í–ê–® –î–û–ú–ï–ù: https://$DUCKDNS_URL"
echo ""
echo "üîê –°–ò–°–¢–ï–ú–ê –î–û–°–¢–£–ü–ê:"
echo "üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –í–•–û–î–ê: http://$SERVER_IP:8088"
echo "   –ò–õ–ò https://$DUCKDNS_URL:8088"
echo ""
echo "üë§ –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê:"
echo "   –õ–æ–≥–∏–Ω: admin"
echo "   –ü–∞—Ä–æ–ª—å: homeserver"
echo ""
echo "üé¨ –§–£–ù–ö–¶–ò–Ø '–ü–û–ò–°–ö –§–ò–õ–¨–ú–û–í' –í JELLYFIN:"
echo "   1. –û—Ç–∫—Ä–æ–π—Ç–µ Jellyfin"
echo "   2. –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ 'üîç –ü–û–ò–°–ö –§–ò–õ–¨–ú–û–í'"
echo "   3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç—Å—è"
echo "   4. –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å"
echo "   5. –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è"
echo ""
echo "üîê VPN –î–õ–Ø HIDDIFY:"
echo "   –ü–æ—Ä—Ç WireGuard: $WIREGUARD_PORT"
echo "   –ö–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞: /home/$USER/wireguard/client.conf"
echo "   QR-–∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:"
qrencode -t ansiutf8 < /home/$USER/wireguard/client.conf
echo ""
echo "üîë –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø:"
echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/change-password.sh"
echo ""
echo "üé≤ –°–õ–£–ß–ê–ô–ù–´–ï –ü–û–†–¢–´:"
echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/random-ports.sh –¥–ª—è —Å–º–µ–Ω—ã –ø–æ—Ä—Ç–æ–≤"
echo ""
echo "üìä –û–°–ù–û–í–ù–´–ï –°–ï–†–í–ò–°–´:"
echo "üè† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: http://$DUCKDNS_URL (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"
echo "üé¨ Jellyfin (–º–µ–¥–∏–∞): http://$DUCKDNS_URL:8096"
echo "üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤: http://$DUCKDNS_URL:5055"
echo "‚òÅÔ∏è Nextcloud (—Ñ–∞–π–ª—ã): http://$DUCKDNS_URL/nextcloud"
echo ""
echo "‚ö° –ö–ê–ö –ù–ê–ß–ê–¢–¨:"
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://$SERVER_IP:8088"
echo "2. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: homeserver"
echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –≤ Hiddify –∏—Å–ø–æ–ª—å–∑—É—è client.conf"
echo "4. –í Jellyfin –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤"
echo ""
echo "üöÄ –ì–æ—Ç–æ–≤–æ! –í–∞—à –¥–æ–º–∞—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω!"
echo "=========================================="
